# -*- coding: utf-8 -*-
"""Lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EzhMyZZwa-WoqlFV4m6-k-2FU2u7rokb
"""

import pandas as pd

df_loan = pd.read_csv('/content/loan_approval.csv')

df_loan.info()

df_loan.isnull().sum()

df_loan.head(2)

from matplotlib import pyplot as plt
df_loan[' loan_amount'].plot(kind='hist', bins=20, title=' loan_amount')
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
df_loan.plot(kind='scatter', x=' income_annum', y=' loan_amount', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
import seaborn as sns
df_loan.groupby(' loan_status').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

from matplotlib import pyplot as plt
import seaborn as sns
df_loan.groupby(' education').size().plot(kind='barh', color=sns.palettes.mpl_palette('Dark2'))
plt.gca().spines[['top', 'right',]].set_visible(False)

duplicates = df_loan.duplicated(keep=False)
df_loan['dup_bool'] = duplicates
print(df_loan[df_loan['dup_bool'] == True].count())
df_loan.drop('dup_bool',axis=1)
df_loan.head(1)

from sklearn.preprocessing import LabelEncoder

lbl_enc = LabelEncoder()
df_loan[' education'] = lbl_enc.fit_transform(df_loan[' education'])
df_loan[' self_employed'] = lbl_enc.fit_transform(df_loan[' self_employed'])
df_loan[' loan_status'] = lbl_enc.fit_transform(df_loan[' loan_status'])

from sklearn.model_selection import train_test_split


x = df_loan.drop(['loan_id',' loan_status'],axis=1)
y = df_loan[' loan_status']

X_train, X_test, y_train, y_test = train_test_split(x,y,test_size=0.33, random_state=42)

from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
import xgboost as xgb
from sklearn.metrics import accuracy_score, classification_report

algos = ['Decision tree','Logistic','RandomForest', 'XGB']
accs=[]

dec_clf = DecisionTreeClassifier()
dec_clf.fit(X_train,y_train)
y_pred = dec_clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Decision tree Accuracy:", accuracy)
print(classification_report(y_test, y_pred))
accs.append(round(accuracy*100,2))


lr_clf = LogisticRegression()
lr_clf.fit(X_train,y_train)
y_pred = lr_clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("Logistic tree Accuracy:", accuracy)
print(classification_report(y_test, y_pred))
accs.append(round(accuracy*100,2))


RF_clf = RandomForestClassifier()
RF_clf.fit(X_train,y_train)
y_pred = RF_clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("RandomForest  Accuracy:", accuracy)
print(classification_report(y_test, y_pred))
accs.append(round(accuracy*100,2))


xgb_clf = xgb.XGBClassifier(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42)
xgb_clf.fit(X_train, y_train)
y_pred = xgb_clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print("XGB Accuracy:", accuracy)
print(classification_report(y_test, y_pred))
accs.append(round(accuracy*100,2))

accs

#Decision Tree classifier has highest accuracy

#Insights:
# The Loan amount is positively linear with income per annum
#

