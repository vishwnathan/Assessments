# -*- coding: utf-8 -*-
"""LVADSUSR113-selva-IA2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pmY8cImstckRnd-arpYqVfYDfcftDsbR
"""

#1
import numpy as np
class telescope_image:

  def __init__(self):
    pass

  def convert_rgb_to_grayscale(self,rgb_image):

    for i in range(len(rgb_image)):
      rgb_image[i]=(rgb_image[i]*[[0.2989,0.5870,0.1140],[0.2989,0.5870,0.1140],[0.2989,0.5870,0.1140]])
    grayscale = rgb_image
    return grayscale

obj = telescope_image()
rgb_image = np.array([[[255,0,0],[0,255,0],[0,0,255]],
                      [[255,255,0],[255,0,255],[0,255,255]],
                      [[127,127,127],[200,200,200],[50,50,50]]])
print(obj.convert_rgb_to_grayscale(rgb_image))

#2
import numpy as np
class health:
  def __init__(self,df):
    self.df = df
  def normalize_data(self):
    self.df = np.zeros(self.df.shape)
    return self.df

data = np.array({'height':[1.8,1.6,1.68,1.70],'weight':[43,66,78,67],'age':[22,21,24,33]})

obj = health(data)
obj.normalize_data()

#3
import numpy as np
class sensors:
  def __init__(self,data):
    self.data = data
  def reorganize(self):
    ret = np.empty((len(self.data),self.data[0].size))
    for i in range(len(self.data)):
      ret[i] = self.data[i].flatten()
    return ret

data = np.array([[[1,2],[3,4]],[[12,3],[322,32]]],ndmin=3)

obj = sensors(data)
print(obj.reorganize())

#4
import numpy as np
class athlete_performance:
  def __init__(self) -> None:
    pass
  def improvement(self,data):
    ret = np.empty((len(data)))
    for i in range(len(data)):
      ret[i] = data[i][-1] - data[i][0]
    return ret

obj = athlete_performance()
data = np.array([[2,3,4,5,6],[2,3,4,6,6],[34,34,45,56,6]])
print(obj.improvement(data))

#5
import numpy as np
class student:
  def __init__(self) -> None:
    pass
  def avg_score(self,data):
    ret = np.empty((len(data)))
    for i in range(len(data)):
      temp = np.where(data[i]>-1,data[i],0)
      ret[i] = temp.sum() / len(data[i])
    return ret

obj = student()
data = np.array([[2,3,4,-1,6],[2,3,4,-1,6],[34,34,-1,-1,6]])
print(obj.avg_score(data))

#6
import numpy as np
class climate:
  def __init__(self) -> None:
    pass
  def adjusted(self,city,adj_factors):
    ret = np.empty(city.shape)
    for i in range(len(city)):
      ret[i] = city[i]*adj_factors
    return ret

obj = climate()
city=np.array([[1,2,3,4,5,5,6,7,8,8,9],[1,2,3,4,5,5,6,7,8,8,9],[1,2,3,4,5,5,6,7,8,8,9],[1,2,3,4,5,5,6,7,8,8,9]])
adj_factors = np.array([0.2,0.3,0.40,4.40,5.50,5.60,60.5,1,3,4,1])
print(obj.adjusted(city,adj_factors))

#7
import pandas as pd
data = pd.DataFrame({'Name':['sda','adsad','thgsdadf','ghhfasa','dfgfg','fgergr','regfv'],
        'Age':[30,34,24,42,50,59,32],
        'city':['NY','LA', 'CH','HN','PNX','MI','BT'],
        'dept':['HR','IT','Finance','Marketing','Sales','IT','HR']
        })
class hr_analysis:
  def __init__(self) -> None:
    pass
  def get_hr(self,DF):
    ret = np.empty(DF.shape)
    for i in range(len(DF)):
      if (DF[i]['Age']<45,DF[i]['dept']!='HR'):
        ret[i] = DF[i]['Name','city']
    return ret

obj = hr_analysis()
print(obj.get_hr(data))

#8

#9
employee = pd.DataFrame({'Employee':['Alice','Bob'],
                         'Dept':['HR','IT'],
                         'Manager':['john','rachel']
                        })
project = pd.DataFrame({'Employee':['Alice','Bob'],
                         'project':['p1','p2']
                        })
merged_data = pd.merge(employee,project,on='Employee',how='right')
print(merged_data)

#10
data = pd.DataFrame({
    'Dept':['electronics','clothing'],
    'salesperson': ['Alice','Bob'],
    'sales': ['70000','50000']
})
avg_sales = data.groupby('Dept').aggregate({'sales':'mean'})
avg_sales